a <- (234 + 2^i)%% 2^9
print(a)
}
for(i in 0:8){
a <- (234 + 2^i)%% 2^9
print(a)
}
source('C:/software/cloudcomputing/a.R')
(1975*1) %% 64
(1975*2) %% 64
(1985*1) %% 64
(1985*2) %% 64
(1995*1) %% 64
(1995*2) %% 64
(2005*1) %% 64
(2005*2) %% 64
(2015*1) %% 64
(2015*2) %% 64
for(i in 0:255){
a <- (195 + 2^i)%% 2^255
print(a)
}
2^8
for(i in 0:7){
a <- (195 + 2^i)%% 2^8
print(a)
}
source('C:/software/cloudcomputing/c.R')
R.version.string
swirl()
library(swirl)
swirl()
swirl()
swirl()
d1<-Sys.Date()
class(d1)
d1
unclass(d1)
d1
d2<- as.Date("1969-01-01")
unclass(d2)
t1<- Sys.time()
unclass(t1)
info(t1)
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
t1
unclass(t2)
str(unclass(t2))
t1
str(unclass(t1))
t2$min
weekday(t1)
weekdays(t1)
weekdays(d1)
t1
months(t1)
quarters(t1)
quarters(t2)
t3 <= October 17, 1986 08:24
t3 <= "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,unit="days")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Exploratory Data Analysis")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
names(cran)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-5:20)
select(cran,-time(-5:20))
-5:20
-(5:20)
select(cran,-(5:20))
select(cran,-(X:size))
X
filter(cran,package=="swirl")
filter(cran,r_version="3.1.1",country=="US')
")
filter(cran,r_version="3.1.1",country=="US")
filter(cran,r_version="3.1.1",country=="US")
filter(cran, r_version="3.1.1", country=="US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN"| country =="US" )
filter(cran, country == "IN"| country =="US" )
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(3,5,NA,10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,is.na(r_version))
filter(cran,!is.na(r_version))
cran2 <- select9cran,size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
select(cran,ip_id,package,size)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size/2^10)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <= group_by(cran,by_package=package))
by_package <= group_by(cran,by_package=package)
by_package <- group_by(cran,by_package=package)
by_package <- group_by(cran,package)
by_package
?summarize
summarize(by_package,mean(size))
submit()
submit()
save()
save(summarize.R)
submit()
submit()
submit()
submit()
reset()
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
dim(pack_sum$count)
length(pack_sum$count)
top_counts <-filter(pack_sum,count >679)
top_counts
View(top_counts)
top_counts <-arrange(top_counts$count)
top_counts <-arrange(top_counts$counts)
top_counts
top_counts$count
arrange(top_counts$count)
top_counts_sorted <-arrange(top_counts.desc(count))
top_counts_sorted <-arrange(top_counts,desc(count))
View(top_count_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <-filter(pack_sum$unique,count >465)
top_unique <-filter(pack_sum,count$unique >465)
top_unique <-filter(pack_sum,count >465)
top_unique <-filter(pack_sum,count >465)
top_unique <-filter(pack_sum,unique >465)
View(top_unique)
top_unique_sorted <-arrange(top_unique,desc(count))
top_unique_sorted <-arrange(top_unique,desc(unique))
View(top_unique_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(top_unique_sorted)
View(result3)
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
help()
quit
reset()
print
print()
go()
exit
exit()
quit()
value <- rnorm(300,mean=100,sd=20)
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,3))
#value <- batsman$Runs
par(mar=c(4,4,1,1))
boxplot(value, horizontal=TRUE,  outline=TRUE,ylim=c(0,160),
frame=F, col = "green1")
value <- rnorm(300,mean=100,sd=20)
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,3))
par(mar=c(4,4,1,1))
boxplot(value, horizontal=TRUE,  outline=TRUE,ylim=c(0,160),
frame=F, col = "green1")
value <- rnorm(300,mean=100,sd=20)
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,3))
par(mar=c(4,4,1,1))
boxplot(value, horizontal=TRUE,  outline=TRUE,ylim=c(0,160),
frame=F, col = "green1")
value <- rnorm(300,mean=100,sd=20)
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,3))
par(mar=c(4,4,1,1))
boxplot(value, horizontal=TRUE,  outline=TRUE,ylim=c(0,160),
frame=F, col = "green1")
hist(value,breaks=40,xlab="Runs",ylab="Runs frequency", main = "Score")
value <- rnorm(300,mean=100,sd=20)
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,3))
par(mar=c(4,4,1,1))
boxplot(value, horizontal=TRUE,  outline=TRUE,ylim=c(0,160),
frame=F, col = "green1")
hist(value,breaks=40,xlab="Runs",ylab="Runs frequency", main = "Score")
6/9
q()
library(swirl)
swirl()
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(low_dice)
expect_dice(dice_low)
.5 *(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- dice_fair *PDF
ex2_fair <- dice_fair * dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5^2
sum(dice_high * dice_sqr) -edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
sd(apply(matrix(2/sqrt(10),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/2 *sqrt(10)
1/(2 *sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
10 * .8^3 * .2^2
choose(5,3
)
choose(5,3)*.8^3*.2^2 + choose(5,4)*.8^4*.2 +choose(5,5)*.8^5*.2^0
?quantile
quantile(2,5,.8,lower.tail=FALSE)
?pbinom
pbinom(2,5,.8,lower.tail=FALSE)
qnorm(.1)
0
qnorm(.975,mean=3,sd=2)
1.96*2+3
pnorm(1200,1020,50)
pnorm(1200,1020,50,lower.tail=FALSE)
(1200-1020)/50
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.95,1020,50,lower.tail=TRUE)
qnorm(.75,1020,50,lower.tail=TRUE)
pnorm(qnorm(.53))
qnorm(pnorm(.53))
ppois(3,2.5,lower.tail=TRUE,log.p=FALSE)
ppois(3,2.5*4,lower.tail=TRUE,log.p=FALSE)
?
pbinom
pbinom(5,1000,.01)
?ppois
ppois(.05,1000*.01)
ppois(5,1000*.01)
head(pollution)
0
exit()
quit()
devtools::install_github('rstudio/shinyapps')
install.packages('digest')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages('Rcurl')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
swirl()
library(swirl)
swirl()
ls()
rm(list=ls())
install.packages("devtools")
library(devtools)
install_github("ckt14/tvganesh")
ls()
rm(list=ls())
ls()
library(devtools)
version(XML)
XML
install.packages("RWordPress")
?knowWP
knitWP
?batsman4s
library(cricketer)
library(cricketr)
?getPlayerData
profileNo=35320
home <-getPlayerData(profile=profileNo,dir=".",file="home.csv",homeOrAway=c(1),result=c(1,2,4))
# Get the data for games played overseas
away <-getPlayerData(profile=profileNo,dir=".", file="away.csv",homeOrAway=c(2),result=c(2,4))
home <- clean("./home.csv")
away <- clean("./away.csv")
home
away
home$venue="home"
away$venues="away"
homeAway <- rbind(home,away)
home$venue="home"
away$venue="away"
homeAway <- rbind(home,away)
dim(home)
dim(away)
names(away)
away <-getPlayerData(profile=profileNo,dir=".", file="away.csv",homeOrAway=c(2),result=c(2,4))
home <- clean("./home.csv")
away <- clean("./away.csv")
home$venue="home"
away$venue="away"
homeAway <- rbind(home,away)
name="aaa"
atitle <- paste(name,"- Runs in games at home and overseas")
# Create boxplots
boxplot(Runs~venue,data=homeAway,col=c("blue","green"),xlab="Match venue",
ylab="Runs scored", main=atitle)
# Create boxplots
boxplot(Runs~venue,data=homeAway,col=c("blue","green"),xlab="Match venue",
ylab="Runs scored", main=atitle)
a <- dim(home)
b <- dim(away)
val1 <- paste(b[1], "Overseas")
val2 <- paste(a[1],"Home venue")
vals <- list(val1,val2)
legend(x="top", legend=vals, lty=c(1,1),
lwd=c(7,7),col=c("blue","green"),bty="n")
mtext("Data source-Courtesy:ESPN Cricinfo", side=1, line=4, adj=1.0, cex=1, col="blue")
?gePlayerData
?gePlayerData
?getPlayerData
profileNo <- 30176
home <-getPlayerData(profile=profileNo,dir=".",file="home.csv",homeOrAway=c(1),
result=c(1,2,4),type="bowling")
# Get the data for games played overseas
away <-getPlayerData(profile=profileNo,dir=".", file="away.csv",homeOrAway=c(2),
result=c(2,4),type="bowling")
home <- cleanBowlerData("./home.csv")
away <- cleanBowlerData("./away.csv")
home
home$venue="home"
away$venue="away"
homeAway <- rbind(home,away)
atitle <- paste(name,"- Wickets-Home & overseas")
# Create boxplots
boxplot(Runs~venue,data=homeAway,col=c("blue","green"),xlab="Match venue",
boxplot(Wkts~venue,data=homeAway,col=c("blue","green"),xlab="Match venue",
ylab="Wickets", main=atitle)
a <- dim(home)
boxplot(Wkts~venue,data=homeAway,col=c("blue","green"),xlab="Match venue",
ylab="Wickets", main=atitle)
names(homeAway)
home$venue="Home"
away$venue="Overseas"
homeAway <- rbind(home,away)
atitle <- paste(name,"- Wickets-Home & overseas")
# Create boxplots
boxplot(Wkts~venue,data=homeAway,col=c("blue","green"),xlab="Match venue",
ylab="Wickets", main=atitle)
a <- dim(home)
b <- dim(away)
val1 <- paste(b[1], "Overseas")
val2 <- paste(a[1],"Home venue")
vals <- list(val1,val2)
legend(x="top", legend=vals, lty=c(1,1),
lwd=c(7,7),col=c("blue","green"),bty="n")
mtext("Data source-Courtesy:ESPN Cricinfo", side=1, line=4, adj=1.0, cex=1, col="blue")
rm(list=ls())
q()
q()
23.25/30
q()
library(rgeos)
library(maptools)
library(ggplot2)
remove.packages("scales")
install.packages("ggplot2")
library(rgeos)
library(maptools)
library(ggplot2)
library(dplyr)
library(stringr)
library(reshape2)
library(RColorBrewer)
library(rgeos)
library(maptools)
library(ggplot2)
setwd("C:/software/R/india/edu")
ind_dist <- readShapeSpatial("./IND_adm/IND_adm2.shp")
district_df = ind_dist@data
state_dist_df = data.frame(district_df[grep(state,district_df$NAME_1),])
state="Tamil Nadu"
ind_dist <- readShapeSpatial("./IND_adm/IND_adm2.shp")
district_df = ind_dist@data
state_dist_df = data.frame(district_df[grep(state,district_df$NAME_1),])
polygon_list = list()
for (istr in rownames(state_dist_df)){
i = as.numeric(istr) + 1
tmp = ind_dist@polygons[i]
polygon_list = c(polygon_list,tmp)
}
# construct a new shape file with the  districts
dist_spatial = SpatialPolygons(polygon_list,1:length(polygon_list))
dist_spatial_frame = SpatialPolygonsDataFrame(dist_spatial,data=state_dist_df)
shpFile <- paste(state,".shp",sep="")
writeSpatialShape(dist_spatial_frame,shpFile)
dist_df = readShapePoly(shpFile)
plot(dist_df)
dist <- fortify(dist_df, region = "NAME_2")
csvFile <- paste(state,".csv",sep="")
stateData <- read.csv(csvFile)
a <- filter(stateData,Age.group=="All ages")
library(dplyr)
library(stringr)
library(reshape2)
library(RColorBrewer)
csvFile <- paste(state,".csv",sep="")
stateData <- read.csv(csvFile)
a <- filter(stateData,Age.group=="All ages")
b <- filter(a,grepl("District",Area.Name))
c <- filter(b,Total..Rural..Urban=="Total")
c$Area.Name <-gsub("District - ","",c$Area.Name)
c$Area.Name <- gsub("\\d+","",c$Area.Name)
c$Area.Name <- gsub(" |\\*","",c$Area.Name)
print("Here")
df <- c[,5:13]
names(df) <-c("Area.Name","Total..Rural..Urban", "Age.group", "Persons","Males","Females",
"PersonsEdu","MalesEdu", "FemalesEdu")
df$PersonsEdu <- df$PersonsEdu/d$Persons * 100
df$MalesEdu <- df$MalesEdu/d$Males * 100
df$PersonsEdu <- df$PersonsEdu/df$Persons * 100
df$MalesEdu <- df$MalesEdu/df$Males * 100
df$FemalesEdu <- df$FemalesEdu/df$Females * 100
m= max(df$PersonsEdu)
n = min(df$PersonsEdu)
mid = (m+n)/2
length(intersect(df$Area.Name,unique(dist$id)))
setdiff(df$Area.Name,unique(dist$id))
setdiff(unique(dist$id),df$Area.Name)
if(state == "Tamil Nadu"){
df[df$Area.Name=="TheNilgiris",]$Area.Name = "Nilgiris"
df[df$Area.Name=="Viluppuram",]$Area.Name = "Villupuram"
df[df$Area.Name=="Tiruchirappalli",]$Area.Name = "Tiruchchirappalli"
df[df$Area.Name=="Thoothukkudi",]$Area.Name = "Thoothukudi"
df[df$Area.Name=="Tirunelveli",]$Area.Name = "Tirunelveli Kattabo"
} else if(state == "Kerala"){
df[df$Area.Name=="Pathanamthitta",]$Area.Name = "Pattanamtitta"
}
# Select the districts with lowest literacy
m <- head(arrange(d,PersonsEdu),5)
lowestLiteracy <- paste(m$Area.Name,"(",round(m$PersonsEdu,1),")",sep="")
# Get the min/max latitude and longitude for plotting districts with lowest literacy
# This is obtained from the fortified data frame
minLat= min(dist$lat)
maxLat =max(dist$lat)
minLong = min(dist$long)
maxLong = max(dist$long)
x = minLong+0.5
y= minLat + 1.5
# Create a data frame to primt the top 5 ofenders
labels <- data.frame(
xc = c(x,x,x,x,x),
yc = c(y,y-.2,y-0.4,y-0.6,y-.8),
label = as.vector(lowestLiteracy)
)
print("Here1")
atitle=paste("Literacy in the state of ", state)
print(dim(d))
ggplot() + geom_map(data = df, aes(map_id = Area.Name, fill = df$PersonsEdu),
,map = dist,color="black",size=0.25) +
expand_limits(x = dist$long, y = dist$lat) +
scale_fill_distiller(name="Percent", palette = "YlGn")+
labs(title=atitle)
#+
